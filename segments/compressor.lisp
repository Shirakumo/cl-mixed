(in-package #:org.shirakumo.fraf.mixed)

(defclass compressor (segment)
  ()
  (:default-initargs
   :samplerate *default-samplerate*))

(defmethod initialize-instance :after ((segment compressor) &key samplerate pregain postgain threshold knee ratio attack release predelay release-zone (bypass NIL bypass-p) wet)
  (with-error-on-failure ()
    (mixed:make-segment-compressor samplerate (handle segment)))
  (when pregain (setf (pregain segment) pregain))
  (when postgain (setf (postgain segment) postgain))
  (when threshold (setf (threshold segment) threshold))
  (when knee (setf (knee segment) knee))
  (when ratio (setf (compression-ratio segment) ratio))
  (when attack (setf (attack segment) attack))
  (when release (setf (release segment) release))
  (when predelay (setf (predelay segment) predelay))
  (when release-zone (setf (release-zone segment) release-zone))
  (when bypass-p (setf (bypass segment) bypass))
  (when wet (setf (wet segment) wet)))

(defun make-compressor (&rest args &key samplerate pregain postgain threshold knee ratio attack release predelay release-zone bypass wet)
  (declare (ignore samplerate pregain postgain threshold knee ratio attack release predelay release-zone bypass wet))
  (apply #'make-instance 'compressor args))

(define-field-accessor samplerate compressor :uint32 :samplerate)
(define-field-accessor pregain compressor :float :compressor-pregain)
(define-field-accessor postgain compressor :float :compressor-postgain)
(define-field-accessor threshold compressor :float :compressor-threshold)
(define-field-accessor knee compressor :float :compressor-knee)
(define-field-accessor compression-ratio compressor :float :compressor-ratio)
(define-field-accessor attack compressor :float :compressor-attack)
(define-field-accessor release compressor :float :compressor-release)
(define-field-accessor predelay compressor :float :compressor-predelay)
(define-vector-field-accessor release-zone compressor :compressor-releasezone 4)
(define-field-accessor bypass compressor :bool :bypass)
(define-field-accessor wet compressor :float :mix)
(define-field-reader gain compressor :float :compressor-gain)
