(in-package #:org.shirakumo.fraf.mixed.examples)

(defun convolution (file fir &key (samplerate 44100) (output 'org.shirakumo.fraf.mixed.out123:drain) (buffersize 100))
  (mixed:init)
  (etypecase fir
    (mixed:buffer)
    ((simple-array single-float (*)))
    ((or string pathname)
     (let ((buffers (org.shirakumo.fraf.mixed.wav:load-to-memory fir)))
       (setf fir (copy-seq (mixed:data (first buffers))))
       (mapcar #'mixed:free buffers))))
  (mixed:with-objects ((source (mixed:make-unpacker :samplerate samplerate :frames buffersize))
                       (drain (mixed:make-packer :samplerate samplerate :frames buffersize))
                       (conv-l (mixed:make-convolution fir :samplerate samplerate))
                       (conv-r (mixed:make-convolution fir :samplerate samplerate))
                       (mp3 (make-instance 'org.shirakumo.fraf.mixed.mpg123:source :file file :pack source))
                       (out (make-instance output :pack drain)))
    (mixed:with-buffers buffersize (l1 r1 l2 r2)
      (mixed:connect source :left conv-l :mono l1)
      (mixed:connect source :right conv-r :mono r1)
      (mixed:connect conv-l :mono drain :left l2)
      (mixed:connect conv-r :mono drain :right r2)
      (mixed:start out)
      (mixed:with-chain chain (mp3 source conv-l conv-r drain out)
        (format T "~&Playing back on ~d channels @ ~dHz, ~a~%"
                (mixed:channels drain) (mixed:samplerate drain) (mixed:encoding drain))
        (loop until (mixed:done-p mp3)
              do (mixed:mix chain))))))
